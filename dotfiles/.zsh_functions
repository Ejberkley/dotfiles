#!/bin/zsh

push() {
  local ref="$(git symbolic-ref HEAD 2>&1)"
  if [[ $ref =~ 'fatal: not a git repository' ]]; then
    echo "Not a git repository"
  else
    if [[ $ref =~ '.*/([^/]*)' ]]; then
      local branch=$match[1]
    else
      echo "No branch found"
    fi
    local merge_branch="$(git config branch.${branch}.merge)"

    if [[ $merge_branch =~ '.*/([^/]*)' ]]; then
      git push
    else
      git push --set-upstream origin $branch
    fi
  fi
}

port() {
  lsof -i tcp:$1
}

delete_branches() {
  git fetch --prune
  local branches="$(git for-each-ref --shell --format='%(refname) %(push:short)')"
  while read -r branch; do
    if [[ $branch =~ "'refs/heads/(.*)' '(.*)'" ]]; then
      local local_branch=$match[1]
      local remote_branch=$match[2]
      if [[ $remote_branch == '' ]]; then
        # No remote was ever set for this branch so it probably contains new work
        continue
      fi

      if [[ $branches =~ "$remote_branch" ]]; then
        # The remote branch still exists so don't delete the local branch
        continue
      fi

      # The remote branch is set, but has been deleted. That's a good indication that the changes
      # were either merged in or are no longer needed so we can delete the branch
      echo "git branch -D $local_branch"
    fi
  done <<< "$branches"
}

update() {
  for d in /users/brennen/work/*/; do
    echo $d
    cd $d
    local head="$(git remote show origin | grep "HEAD branch" | sed 's/.*: //')"
    git checkout $head
    git reset --hard
    git pull
    del rubocop-1-16
    cb rubocop-1-16
    cp /users/brennen/desktop/rubocop .rubocop.yml
    git commit -am "Update rubocop config"
    push
    pr
  done
}

get() {
  if [ $# -eq 0 ]; then
		"No table name given"
	else
    echo -e '\e[95;107;1mOpening SSH tunnel\e[0m'
    ssh -N -L 10026:$DEGREEPAGE_HOST:3306 acheron2-edu &
    local pid=$!
    sleep 3

    echo -e '\e[95;107;1mDownloading data\e[0m'
    mysqldump --single-transaction --skip-lock-tables --host=127.0.0.1 --port=10026 -u$DEGREEPAGE_USER -p$DEGREEPAGE_PASSWORD degreepage $1 > ~/desktop/$1.sql

    echo -e '\e[95;107;1mImporting data\e[0m'
    mysql -u root degreepage < ~/desktop/$1.sql

    echo -e '\e[95;107;1mClosing SSH Tunnel\e[0m'
    kill $pid

    echo -e '\e[95;107;1mDeleting file\e[0m'
    rm ~/desktop/$1.sql
	fi
}

# UPgrade Chimera-Edu
upce() {
  git stash save "upce"
  cm
  del upgrade
  cb upgrade

  lice

  yarn upgrade chimera-edu
  git commit -am 'Upgrade chimera-edu'
  push
  hub pull-request --no-edit

  set_pr_url
  if [[ $pr_url == '' ]]; then
    echo "Error opening PR in browser"
  else
    echo $pr_url
    open $pr_url
  fi
}

set_pr_url() {
  set_git_branch
  set_git_repo_url
  local first_pr="$(hub pr list -h $git_branch)"
  if [[ $first_pr =~ "#([0-9]*)" ]]; then
    pr_url="${git_repo_url}/pull/${match[1]}"
  else
    pr_url = ''
  fi
}

#LOcal Chimera-Edu
loce() {
  # Uncomment the local chimera-edu line
  sed -i '' "s/#[[:space:]]*\(gem[[:space:]]*['\"]chimera-edu.*path:\)/\1/" Gemfile

  # Comment out the live chimera-edu line
  sed -i '' "s/^\([[:space:]]*gem[[:space:]]*['\"]chimera-edu.*git:\)/# \1/" Gemfile
  bundle update --group=internal --conservative
  u
}

#LIve Chimera-Edu
lice() {
  # Uncomment the live chimera-edu line
  sed -i '' "s/#[[:space:]]*\(gem[[:space:]]*['\"]chimera-edu.*git:\)/\1/" Gemfile

  # Comment out the local chimera-edu line
  sed -i '' "s/^\([[:space:]]*gem[[:space:]]*['\"]chimera-edu.*path:\)/# \1/" Gemfile

  # Update chimera-edu to the newest version
  git -C ~/work/chimera-edu fetch
  local version_file="$(git -C ~/work/chimera-edu show origin/master:lib/chimera/edu/version.rb)"
  if [[ $version_file =~ "VERSION[[:space:]]*=[[:space:]]*['\"](.+)['\"]" ]]; then
    local version=$match[1]
    echo "Updating chimera-edu to version $version"
    sed -i '' "s/\(gem[[:space:]]*['\"]chimera-edu['\"],[[:space:]]*['\"]\).*\(['\"],[[:space:]]*git\)/\1= "$version"\2/" Gemfile
    bundle update --group=internal --conservative
    bundle update chimera-edu --conservative
    u
  else
    echo "No version found for chimera-edu"
  fi
}

set_git_repo_url() {
  local path="$(git remote show origin | grep 'Push\s*URL:')"
  if [[ $path =~ 'https://github.com/(.*)\.git' ]]; then
    git_repo_url="https://github.com/${match[1]}"
  else
    if [[ $path =~ 'git@github.com:(.*)' ]]; then
      git_repo_url="https://github.com/${match[1]}"
    else
      git_repo_url=''
    fi
  fi
}

link_tests() {
  rm -rf spec/factories
  rm -rf spec/chimera
  rm -rf spec/support

  ln -s `bundle show chimera-edu`/spec/factories spec/
  ln -s `bundle show chimera-edu`/spec/chimera spec/
  ln -s `bundle show chimera-edu`/spec/support spec/
}

link_tests_td() {
  rm -rf spec/factories
  rm -rf spec/chimera
  rm -rf spec/support

  ln -s `bundle show td-chimera-widgets`/spec/factories spec/
  ln -s `bundle show td-chimera-widgets`/spec/chimera spec/
  ln -s `bundle show td-chimera-widgets`/spec/support spec/
}

t() {
  link_tests
  rspec
}

ship() {
  set_git_repo_url
  set_git_branch

  local environment="$git_branch"
  local end_path=''
  if [[ $environment != 'staging' ]]; then
    local environment='production'
    local end_path='/pull_requests'
  fi

  if [[ "$git_repo_url/$environment" =~ 'https://github.com/(.*)' ]]; then
    local stack=$match[1]
    open "https://admin.optimal.com/shipit/$stack$end_path"
  else
    echo "Not a git repository"
  fi
}

pr() {
  local ref="$(git symbolic-ref HEAD 2>&1)"
  if [[ $ref =~ 'fatal: not a git repository' ]]; then
    echo "Not a git repository"
  else
    if [[ $ref =~ '.*/([^/]*)' ]]; then
      local branch=$match[1]
    else
      echo "No branch found"
    fi

    local origin="$(git remote show origin 2>&1)"
    local regex1="Push  URL: git@github.com:([^
]*)\.git" # zsh regex doesn't support line break characters, so I have to insert one literally
    local regex2="Push  URL: https://github.com/([^
]*)\.git" # zsh regex doesn't support line break characters, so I have to insert one literally
    local regex3="Push  URL: git@github.com:([^
]*)" # zsh regex doesn't support line break characters, so I have to insert one literally
    local regex4="Push  URL: https://github.com/([^
]*)" # zsh regex doesn't support line break characters, so I have to insert one literally

    if [[ $origin =~ $regex1 || $origin =~ $regex2 || $origin =~ $regex3 || $origin =~ $regex4 ]]; then
      local remote=$match[1]
      open https://github.com/$remote/pull/new/$branch
    else
      echo "No remote branch set up"
    fi
  fi
}

# Copy database rows from the live degreepage database to the local degreepage database
#
# @param [$1] The table to copy rows from
# @param [$2] A query to filter the rows by
get_rows() {
  echo -e 'Downloading data'
  mysqldump --no-create-info --skip-triggers --insert-ignore --host=127.0.0.1 --port=3305 --user=reach -p degreepage $1  --where="$2" > ~/desktop/$1.sql

  echo -e 'Importing data'
  mysql -u root degreepage < ~/desktop/$1.sql

  echo -e 'Deleting file'
  rm ~/desktop/$1.sql
}

# Import a database from a file on the desktop
#
# @param [$1] The database name
update_database() {
  database = $1

  echo "Unzipping file..."
  gunzip -c ~/desktop/$database.*.sql.gz > ~/desktop/$database.sql
  echo "Deleting $database-old database..."
  mysqladmin -u root -f drop $database-old
  echo "Backing up $database database..."
  mysql -u root $database -sNe 'show tables' | while read table;
  do mysql -u root -sNe "rename table $database.$table to $database-old.$table"; done
  echo "Importing database..."
  mysql -u root $database < ~/desktop/$database.sql
  echo "Deleting sql file..."
  rm ~/desktop/$database.sql
  echo "Done."
}

# Open a finder window in the directory given, or the current directory if none is specified
f() {
  if [ $# -eq 0 ]; then
    open .
  else
    open $1
  fi
}


# Symlinks for node_modules
sym() {
  if [ $# -eq 0 ]; then
    echo "No project given"
  elif [ -h "node_modules/$1" ]; then
    echo "$1 is already symlinked."
  else
    mv node_modules/$1 node_modules/$1_
    ln -s ~/work/$1 node_modules/$1
  fi
}

# Symlinks for node_modules
unsym() {
  if [ $# -eq 0 ]; then
    echo "No project given"
  elif [ ! -h "node_modules/$1" ]; then
    echo "No symlink found."
  else
    rm node_modules/$1
    mv node_modules/$1_ node_modules/$1
  fi
}

load_xcode() {
  # Custom actions
  sudo rm /Applications/Xcode.app/Contents/Frameworks/IDEKit.framework/Resources/IDETextKeyBindingSet.plist
  sudo ln -s ~/dotfiles/settings/xcode/IDETextKeyBindingSet.plist /Applications/Xcode.app/Contents/Frameworks/IDEKit.framework/Resources/IDETextKeyBindingSet.plist

  # Key bindings
  rm ~/Library/Developer/Xcode/UserData/KeyBindings/Default.idekeybindings
  cp ~/dotfiles/settings/xcode/Default.idekeybindings ~/Library/Developer/Xcode/UserData/KeyBindings/Default.idekeybindings
}

save_xcode() {
  rm ~/dotfiles/settings/xcode/Default.idekeybindings
  cp ~/Library/Developer/Xcode/UserData/KeyBindings/Default.idekeybindings ~/dotfiles/settings/xcode/Default.idekeybindings
}



loop() {
  tables_to_skip=(
    "keywordable_content_keywords"
    "keywords"
    "lighthouse_audits"
    "site_keywords"
    "m_soc_careers"
    "m_soc_careers_temp"
  )

  declare -A tables_with_condition
  tables_with_condition["invalid_sites"]="created_at > DATE_SUB(NOW(),INTERVAL 1 DAY)"
  tables_with_condition["m_daily_ppcs"]="date > DATE_SUB(NOW(),INTERVAL 3 DAY)"
  tables_with_condition["m_daily_site_college_program_source_revenues"]="date > DATE_SUB(NOW(),INTERVAL 3 DAY)"
  tables_with_condition["m_daily_site_entry_path_source_revenues"]="date > DATE_SUB(NOW(),INTERVAL 3 DAY)"
  tables_with_condition["m_daily_site_fads"]="date > DATE_SUB(NOW(),INTERVAL 3 DAY)"
  tables_with_condition["m_daily_site_free_landing_revenues"]="date > DATE_SUB(NOW(),INTERVAL 3 DAY)"
  tables_with_condition["m_daily_visitor_flows"]="date > DATE_SUB(NOW(),INTERVAL 3 DAY)"
  tables_with_condition["m_monthly_keyword_source_revenue"]="date > DATE_SUB(NOW(),INTERVAL 3 MONTH)"
  tables_with_condition["m_weekly_keyword_coverages"]="date > DATE_SUB(NOW(),INTERVAL 3 WEEK)"
  tables_with_condition["m_weekly_keyword_source_revenue"]="date > DATE_SUB(NOW(),INTERVAL 3 WEEK)"
  tables_with_condition["m_weekly_revenue"]="date > DATE_SUB(NOW(),INTERVAL 3 WEEK)"
  tables_with_condition["m_weekly_site_entry_path_request_revenue"]="date > DATE_SUB(NOW(),INTERVAL 3 WEEK)"
  tables_with_condition["m_weekly_source_college_revenue"]="date > DATE_SUB(NOW(),INTERVAL 3 WEEK)"
  tables_with_condition["t_landings"]="created_at > DATE_SUB(NOW(),INTERVAL 1 DAY)"
  tables_with_condition["t_visitor_events"]="created_at > DATE_SUB(NOW(),INTERVAL 1 DAY)"
  tables_with_condition["versions"]="created_at > DATE_SUB(NOW(),INTERVAL 1 DAY)"
  tables_with_condition["zlead"]="timestamp > DATE_SUB(NOW(),INTERVAL 1 WEEK)"
  tables_with_condition["zrequest"]="time_stamp > DATE_SUB(NOW(),INTERVAL 2 DAY)"
  tables_with_condition["zvisit"]="created_at > DATE_SUB(NOW(),INTERVAL 1 DAY)"

  skip_string=""
  for table in "${tables_to_skip[@]}"; do
    skip_string="$skip_string --ignore-table=degreepage.$table"
  done

  for table in "${!tables_with_condition[@]}"; do
    skip_string="$skip_string --ignore-table=degreepage.$table"
  done

  echo "$skip_string"
}

# Print all the colors (useful for seeing what they look like in your particular terminal)
show_colors() {
  echo -e "\e[30;107m Black   \e[30;40m Black   \e[30;040m  Black   \e[97;040m Black   \e[0m"
  echo -e "\e[90;107m Gray    \e[90;40m Gray    \e[30;100m  Gray    \e[97;100m Gray    \e[0m"
  echo -e "\e[37;107m Gray    \e[37;40m Gray    \e[30;047m  Gray    \e[97;047m Gray    \e[0m"
  echo -e "\e[97;107m White   \e[97;40m White   \e[30;107m  White   \e[97;107m White   \e[0m"
  echo -e "\e[35;107m Magenta \e[35;40m Magenta \e[30;045m  Magenta \e[97;045m Magenta \e[0m"
  echo -e "\e[95;107m Magenta \e[95;40m Magenta \e[30;105m  Magenta \e[97;105m Magenta \e[0m"
  echo -e "\e[31;107m Red     \e[31;40m Red     \e[30;041m  Red     \e[97;041m Red     \e[0m"
  echo -e "\e[91;107m Red     \e[91;40m Red     \e[30;101m  Red     \e[97;101m Red     \e[0m"
  echo -e "\e[33;107m Yellow  \e[33;40m Yellow  \e[30;043m  Yellow  \e[97;043m Yellow  \e[0m"
  echo -e "\e[93;107m Yellow  \e[93;40m Yellow  \e[30;103m  Yellow  \e[97;103m Yellow  \e[0m"
  echo -e "\e[32;107m Green   \e[32;40m Green   \e[30;042m  Green   \e[97;042m Green   \e[0m"
  echo -e "\e[92;107m Green   \e[92;40m Green   \e[30;102m  Green   \e[97;102m Green   \e[0m"
  echo -e "\e[36;107m Cyan    \e[36;40m Cyan    \e[30;046m  Cyan    \e[97;046m Cyan    \e[0m"
  echo -e "\e[96;107m Cyan    \e[96;40m Cyan    \e[30;106m  Cyan    \e[97;106m Cyan    \e[0m"
  echo -e "\e[34;107m Blue    \e[34;40m Blue    \e[30;044m  Blue    \e[97;044m Blue    \e[0m"
  echo -e "\e[94;107m Blue    \e[94;40m Blue    \e[30;104m  Blue    \e[97;104m Blue    \e[0m"

  echo -e "\e[35;107;2m Magenta \e[35;40;2m Magenta \e[0m"
  echo -e "\e[95;107;2m Magenta \e[95;40;2m Magenta \e[0m"
  echo -e "\e[31;107;2m Red     \e[31;40;2m Red     \e[0m"
  echo -e "\e[91;107;2m Red     \e[91;40;2m Red     \e[0m"
  echo -e "\e[33;107;2m Yellow  \e[33;40;2m Yellow  \e[0m"
  echo -e "\e[93;107;2m Yellow  \e[93;40;2m Yellow  \e[0m"
  echo -e "\e[32;107;2m Green   \e[32;40;2m Green   \e[0m"
  echo -e "\e[92;107;2m Green   \e[92;40;2m Green   \e[0m"
  echo -e "\e[36;107;2m Cyan    \e[36;40;2m Cyan    \e[0m"
  echo -e "\e[96;107;2m Cyan    \e[96;40;2m Cyan    \e[0m"
  echo -e "\e[34;107;2m Blue    \e[34;40;2m Blue    \e[0m"
  echo -e "\e[94;107;2m Blue    \e[94;40;2m Blue    \e[0m"

  echo -e "\e[30;107;1m Black   \e[30;40;1m Black   \e[30;040;1m  Black   \e[97;040;1m Black   \e[0m"
  echo -e "\e[90;107;1m Gray    \e[90;40;1m Gray    \e[30;100;1m  Gray    \e[97;100;1m Gray    \e[0m"
  echo -e "\e[37;107;1m Gray    \e[37;40;1m Gray    \e[30;047;1m  Gray    \e[97;047;1m Gray    \e[0m"
  echo -e "\e[97;107;1m White   \e[97;40;1m White   \e[30;107;1m  White   \e[97;107;1m White   \e[0m"
  echo -e "\e[35;107;1m Magenta \e[35;40;1m Magenta \e[30;045;1m  Magenta \e[97;045;1m Magenta \e[0m"
  echo -e "\e[95;107;1m Magenta \e[95;40;1m Magenta \e[30;105;1m  Magenta \e[97;105;1m Magenta \e[0m"
  echo -e "\e[31;107;1m Red     \e[31;40;1m Red     \e[30;041;1m  Red     \e[97;041;1m Red     \e[0m"
  echo -e "\e[91;107;1m Red     \e[91;40;1m Red     \e[30;101;1m  Red     \e[97;101;1m Red     \e[0m"
  echo -e "\e[33;107;1m Yellow  \e[33;40;1m Yellow  \e[30;043;1m  Yellow  \e[97;043;1m Yellow  \e[0m"
  echo -e "\e[93;107;1m Yellow  \e[93;40;1m Yellow  \e[30;103;1m  Yellow  \e[97;103;1m Yellow  \e[0m"
  echo -e "\e[32;107;1m Green   \e[32;40;1m Green   \e[30;042;1m  Green   \e[97;042;1m Green   \e[0m"
  echo -e "\e[92;107;1m Green   \e[92;40;1m Green   \e[30;102;1m  Green   \e[97;102;1m Green   \e[0m"
  echo -e "\e[36;107;1m Cyan    \e[36;40;1m Cyan    \e[30;046;1m  Cyan    \e[97;046;1m Cyan    \e[0m"
  echo -e "\e[96;107;1m Cyan    \e[96;40;1m Cyan    \e[30;106;1m  Cyan    \e[97;106;1m Cyan    \e[0m"
  echo -e "\e[34;107;1m Blue    \e[34;40;1m Blue    \e[30;044;1m  Blue    \e[97;044;1m Blue    \e[0m"
  echo -e "\e[94;107;1m Blue    \e[94;40;1m Blue    \e[30;104;1m  Blue    \e[97;104;1m Blue    \e[0m"

  echo -e "\e[35;107;2;1m Magenta \e[35;40;2;1m Magenta \e[0m"
  echo -e "\e[95;107;2;1m Magenta \e[95;40;2;1m Magenta \e[0m"
  echo -e "\e[31;107;2;1m Red     \e[31;40;2;1m Red     \e[0m"
  echo -e "\e[91;107;2;1m Red     \e[91;40;2;1m Red     \e[0m"
  echo -e "\e[33;107;2;1m Yellow  \e[33;40;2;1m Yellow  \e[0m"
  echo -e "\e[93;107;2;1m Yellow  \e[93;40;2;1m Yellow  \e[0m"
  echo -e "\e[32;107;2;1m Green   \e[32;40;2;1m Green   \e[0m"
  echo -e "\e[92;107;2;1m Green   \e[92;40;2;1m Green   \e[0m"
  echo -e "\e[36;107;2;1m Cyan    \e[36;40;2;1m Cyan    \e[0m"
  echo -e "\e[96;107;2;1m Cyan    \e[96;40;2;1m Cyan    \e[0m"
  echo -e "\e[34;107;2;1m Blue    \e[34;40;2;1m Blue    \e[0m"
  echo -e "\e[94;107;2;1m Blue    \e[94;40;2;1m Blue    \e[0m"
}

orig() {
  rm ./**/*.orig
  rm ./**/*_BACKUP_*
  rm ./**/*_BASE_*
  rm ./**/*_LOCAL_*
  rm ./**/*_REMOTE_*
}

#### Pull Request Stuff #####
slack() {
  set_pr_url
  if [[ $pr_url == '' ]]; then
    echo "Error getting PR url"
    return
  fi

  message="$(hub pr list -h $git_branch -f '%t')"
  icon='large_blue_diamond'
  tag_user=$1

  source ~/.config/optimal

  if [[ $pr_url == '' ]]; then
    echo "Error getting PR url"
    return
  fi

  if [[ ${#} == 1 ]]; then
    curl -X POST -H "Authorization: Bearer $SLACK_API_TOKEN" \
    -H 'Content-type: application/json; charset=utf-8' \
    --data "{\"channel\": \"#pr-devs\", \"as_user\": \"true\", \"text\": \"$pr_url :$icon: $message <@$tag_user>\"}" https://slack.com/api/chat.postMessage
  else
    curl -X POST -H "Authorization: Bearer $SLACK_API_TOKEN" \
    -H 'Content-type: application/json; charset=utf-8' \
    --data "{\"channel\": \"#pr-devs\", \"as_user\": \"true\", \"text\": \"$pr_url :$icon: $message\"}" https://slack.com/api/chat.postMessage
  fi
}

shipit() {
  set_pr_url
  if [[ $pr_url == '' ]]; then
    echo "Error getting PR url"
    return
  fi

  set_git_repo_url
  local first_pr="$(hub pr list -h $git_branch)"
  if [[ $first_pr =~ "#([0-9]*)" ]]; then
    PR_URL="${git_repo_url}/pull/${match[1]}"
  else
    echo "No pull requests found"
    return
  fi

  BASE='master'
  get_project

  source ~/.config/optimal
  curl -H "Content-Type: application/json" -s -d "{\"number_or_url\":\"$PR_URL\", \"email\":\"$email\", \"stack_id\":$PROJ}" --header "Authorization: Token token=\"$oauth_token\", email=\"$email\"" -X POST https://admin.optimal.com/api/v1/shipit/pull_requests | jq -r '.message'
}

get_project() {
    PROJ=${PWD##*/}
    case $PROJ in
        "nursingcareer")
            [[ "$BASE" == "master" ]] && PROJ=24
            [[ "$BASE" == "staging" ]] && PROJ=25
        ;;
        "onlineu")
            [[ "$BASE" == "master" ]] && PROJ=34
            [[ "$BASE" == "staging" ]] && PROJ=7
        ;;
        "gradprograms")
            [[ "$BASE" == "master" ]] && PROJ=4
            [[ "$BASE" == "staging" ]] && PROJ=9
        ;;
        "gradreports")
            [[ "$BASE" == "beta" ]] && PROJ=38
            [[ "$BASE" == "master" ]] && PROJ=3
            [[ "$BASE" == "staging" ]] && PROJ=10
        ;; 
        "socialworkdegree")
            [[ "$BASE" == "master" ]] && PROJ=23
            [[ "$BASE" == "staging" ]] && PROJ=26
        ;;
        "gtos")
            [[ "$BASE" == "beta" ]] && PROJ=39
            [[ "$BASE" == "master" ]] && PROJ=2
            [[ "$BASE" == "staging" ]] && PROJ=8
        ;;
        "guide")
            [[ "$BASE" == "master" ]] && PROJ=35
        ;;
        "chimera-edu")
            [[ "$BASE" == "master" ]] && PROJ=37
        ;;
        "chimera")
            [[ "$BASE" == "master" ]] && PROJ=41
        ;;
        "chimera-widget")
            [[ "$BASE" == "master" ]] && PROJ=42
        ;;
        "optimal")
            [[ "$BASE" == "master" ]] && PROJ=48
        ;;
        "reach-admin")
            [[ "$BASE" == "master" ]] && PROJ=19
        ;;
        "talentdesk")
            [[ "$BASE" == "master" ]] && PROJ=15
            [[ "$BASE" == "staging" ]] && PROJ=36
        ;;
        "postly")
            [[ "$BASE" == "master" ]] && PROJ=20
            [[ "$BASE" == "staging" ]] && PROJ=21
        ;;
        "redirections")
            [[ "$BASE" == "master" ]] && PROJ=30
        ;;
        "switchup")
            [[ "$BASE" == "master" ]] && PROJ=31
            [[ "$BASE" == "staging" ]] && PROJ=32
            [[ "$BASE" == "beta" ]] && PROJ=33
        ;;
        "td-chimera-widgets")
            [[ "$BASE" == "master" ]] && PROJ=40
        ;;
        "edu-chimera-widgets")
            [[ "$BASE" == "master" ]] && PROJ=37
        ;;
        "reach_analytics")
            [[ "$BASE" == "master" ]] && PROJ=44
        ;;
        "outreach-edu")
            [[ "$BASE" == "master" ]] && PROJ=45
        ;;
        "outreach-td")
            [[ "$BASE" == "master" ]] && PROJ=46
        ;;
        "outreach")
            [[ "$BASE" == "master" ]] && PROJ=22
            [[ "$BASE" == "staging" ]] && PROJ=27
        ;;
        "td_admin")
            [[ "$BASE" == "master" ]] && PROJ=17
            [[ "$BASE" == "staging" ]] && PROJ=18
        ;;
        "howtobecome")
            [[ "$BASE" == "master" ]] && PROJ=6
            [[ "$BASE" == "staging" ]] && PROJ=14
            [[ "$BASE" == "beta" ]] && PROJ=51
        ;;
        "cnd")
            [[ "$BASE" == "master" ]] && PROJ=5
            [[ "$BASE" == "beta" ]] && PROJ=49
            [[ "$BASE" == "staging" ]] && PROJ=11
        ;;
        "hermes")
            [[ "$BASE" == "master" ]] && PROJ=28
            [[ "$BASE" == "staging" ]] && PROJ=29
        ;;
        "sr_corp")
            [[ "$BASE" == "master" ]] && PROJ=12
            [[ "$BASE" == "staging" ]] && PROJ=13
        ;;
        "optimal-docs")
            [[ "$BASE" == "master" ]] && PROJ=47
        ;;
        *)
            PROJ="not on shipit"
        ;;
    esac
}
